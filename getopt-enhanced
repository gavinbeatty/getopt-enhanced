#!/usr/bin/python
# vi: set ft=python shiftwidth=4 tabstop=4:
#/***************************************************************************
# *   Copyright (C) 2009, 2010, 2012 by Gavin Beatty                        *
# *   gavinbeatty@gmail.com                                                 *
# *                                                                         *
# *   This program is free software; you can redistribute it and/or modify  *
# *   it under the terms of the GNU General Public License as published by  *
# *   the Free Software Foundation; either version 2 of the License, or     *
# *   (at your option) any later version.                                   *
# *                                                                         *
# *   This program is distributed in the hope that it will be useful,       *
# *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
# *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
# *   GNU General Public License for more details.                          *
# *                                                                         *
# *   You should have received a copy of the GNU General Public License     *
# *   along with this program; if not, write to the                         *
# *   Free Software Foundation, Inc.,                                       *
# *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
# ***************************************************************************/

"""Command-line getopt (enhanced) written in python.

Uses the getopt module and pipes.quote meaning it's very portable.
"""

import sys
import os
import os.path
import getopt
import subprocess
import pipes

class Opts(object):
    def __init__(self):
        self.version = "1.1"
        self.short_opts = ""
        self.long_opts = ""
        self.prog_name = None

def help_print():
    print "usage: getopt-enhanced.py [OPTIONS] [-- ARGUMENTS]"

def license_print():
    print "GPLv2+"

def version_print():
    print g_options.version

def error_getopt(err):
    sys.exit(err)

def error_unknown_opt(o):
    sys.exit("Unknown option `%s'" % o)

def error_internal(msg):
    sys.exit("Internal error! Details: %s" % msg)

def error_user_getopt(msg):
    sys.exit("%s: %s" % (g_options.prog_name, msg))

def sq__(one):
    if one == '':
        return "''"
    return pipes.quote(one)

def sq(*args):
    return " ".join([sq__(x) for x in args])

def arg_opts(short_opts, long_opts):
    result = []
    lastc = None
    for c in short_opts:
        if c == ":":
            if lastc is None:
                error_internal(None)
            result.append("-" + lastc)
        lastc = c
    for o in long_opts:
        if o.endswith("="):
            result.append("--" + o[:-1])
    return result

def parse_args(short_opts, long_opts, args, getopt_func=getopt.gnu_getopt):
    # don't catch the getopt.GetoptError exception
    subopts, subargs = getopt_func(args, short_opts, long_opts)
    return (subopts, subargs)

def print_opts_args(opts, args, optlist, fobj=sys.stdout):
    for subo, suba in opts:
        if subo in optlist:
            fobj.write(" %s %s" % (subo, sq(suba)))
        else:
            fobj.write(" %s" % subo)
    fobj.write(" --")
    for suba in args:
        fobj.write(" %s" % sq(suba))
    fobj.write("\n")

def getopt_enhanced(short_options="", long_options="", name=None
, args=None, fobj=sys.stdout):

    getopt_func = getopt.gnu_getopt
    if short_options.startswith("+"):
        getopt_func = getopt.getopt
        short_options = short_options[1:]
    long_options = long_options.replace(":", "=").split(",")
    if name is None:
        name = "getopt"
    if args is None:
        args = []

    popts, pargs = parse_args(short_options, long_options, args
        , getopt_func=getopt_func)

    print_opts_args(popts, pargs
        , arg_opts(short_options, long_options)
        , fobj=fobj)

def main(argv=None, fobj=sys.stdout):
    """The script itself really

    Pass in a list of arguments including the progname for testing.

    Returns a suitable exit status
    """
    if sys.version < '2.4':
        print >>sys.stderr, "Python >= 2.4 required."
        return 1
    if argv is None:
        argv = sys.argv

    global g_options
    g_options = Opts()

    try:
        opts, args = getopt.gnu_getopt(argv[1:], \
                         "To:l:n:h", \
                         ["options=", "long=", "name=", "help", "version", "license"])
    except getopt.GetoptError, err:
        error_getopt(str(err))

    for o, a in opts:
        if o in ("-h", "--help"):
            help_print()
            sys.exit(0)
        elif o == "--version":
            version_print()
            sys.exit(0)
        elif o == "--license":
            license_print()
            sys.exit(0)
        elif o in ("-o", "--options"):
            g_options.short_opts = a
        elif o in ("-l", "--long"):
            g_options.long_opts = a
        elif o in ("-n", "--name"):
            g_options.prog_name = a
        elif o == "-T":
            sys.exit(4)
        else:
            error_unknown_opt(o)

    return getopt_enhanced(g_options.short_opts, g_options.long_opts \
        , g_options.prog_name, args)

    return 0

if __name__ == "__main__":
    sys.exit(main())

